{"remainingRequest":"G:\\wb-vision-server\\ruoyi-ui\\node_modules\\thread-loader\\dist\\cjs.js!G:\\wb-vision-server\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js!G:\\wb-vision-server\\ruoyi-ui\\src\\utils\\ruoyi.js","dependencies":[{"path":"G:\\wb-vision-server\\ruoyi-ui\\src\\utils\\ruoyi.js","mtime":1679144980000},{"path":"G:\\wb-vision-server\\ruoyi-ui\\babel.config.js","mtime":1679144980000},{"path":"G:\\wb-vision-server\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\wb-vision-server\\ruoyi-ui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\wb-vision-server\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}